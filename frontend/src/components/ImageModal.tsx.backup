import { useEffect, useState } from 'react'
import { useQuery, useMutation, useQueryClient } from 'react-query'
import { imageApi, categoryApi } from '../services/api'
import type { Image } from '../types'
import StarRating from './StarRating'
import FavoriteButton from './FavoriteButton'

interface ImageModalProps {
  imageId: number | null
  onClose: () => void
}

export default function ImageModal({ imageId, onClose }: ImageModalProps) {
  const [isClosing, setIsClosing] = useState(false)
  const queryClient = useQueryClient()

  const { data: image, isLoading } = useQuery(
    ['image', imageId],
    () => imageApi.getImage(imageId!),
    {
      enabled: !!imageId,
    }
  )

  // Categories query for future use
  // const { data: categories } = useQuery('categories', () => categoryApi.getCategories())

  const favoriteMutation = useMutation(
    (id: number) => imageApi.toggleFavorite(id),
    {
      onSuccess: (data) => {
        queryClient.setQueryData(['image', imageId], (old: any) => 
          old ? { ...old, favorite: data.favorite } : old
        )
        queryClient.invalidateQueries(['images'])
      },
      onError: (error) => {
        console.error('Failed to toggle favorite:', error)
      }
    }
  )

  const ratingMutation = useMutation(
    ({ id, rating }: { id: number; rating: number }) => imageApi.setRating(id, rating),
    {
      onSuccess: (data) => {
        queryClient.setQueryData(['image', imageId], (old: any) => 
          old ? { ...old, rating: data.rating } : old
        )
        queryClient.invalidateQueries(['images'])
      },
      onError: (error) => {
        console.error('Failed to set rating:', error)
      }
    }
  )

  // Handle escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        handleClose()
      }
    }

    if (imageId) {
      document.addEventListener('keydown', handleEscape)
      document.body.style.overflow = 'hidden' // Prevent background scrolling
    }

    return () => {
      document.removeEventListener('keydown', handleEscape)
      document.body.style.overflow = 'unset'
    }
  }, [imageId])

  const handleClose = () => {
    setIsClosing(true)
    setTimeout(() => {
      onClose()
      setIsClosing(false)
    }, 200) // Match animation duration
  }

  if (!imageId) return null

  return (
    <div 
      className={`fixed inset-0 z-50 bg-black/80 backdrop-blur-sm transition-opacity duration-200 ${
        isClosing ? 'opacity-0' : 'opacity-100'
      }`}
      onClick={handleClose}
    >
      <div className="absolute inset-4 flex">
        {/* Main image area */}
        <div 
          className={`flex-1 flex items-center justify-center transition-transform duration-200 ${
            isClosing ? 'scale-95' : 'scale-100'
          }`}
          onClick={(e) => e.stopPropagation()}
        >
          {isLoading ? (
            <div className="text-white text-lg">Loading...</div>
          ) : image ? (
            <div className="max-w-full max-h-full flex items-center justify-center">
              <img
                src={`/api/image-file/${image.id}`}
                alt={image.filename}
                className="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
                onError={(e) => {
                  // Fallback to thumbnail if original fails
                  const img = e.currentTarget as HTMLImageElement
                  img.src = image.thumbnail_path
                }}
              />
            </div>
          ) : (
            <div className="text-white text-lg">Image not found</div>
          )}
        </div>

        {/* Metadata sidebar */}
        <div 
          className={`w-80 bg-white dark:bg-gray-900 rounded-l-lg shadow-xl overflow-y-auto transition-transform duration-200 ${
            isClosing ? 'translate-x-full' : 'translate-x-0'
          }`}
          onClick={(e) => e.stopPropagation()}
        >
          <div className="p-6">
            {/* Header with close button */}
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Image Details</h3>
              <button
                onClick={handleClose}
                className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                aria-label="Close"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {isLoading ? (
              <div className="text-gray-600 dark:text-gray-400">Loading metadata...</div>
            ) : image ? (
              <ImageMetadata image={image} />
            ) : null}
          </div>
        </div>
      </div>
    </div>
  )
}

function ImageMetadata({ image }: { image: Image }) {
  const queryClient = useQueryClient()
  
  const favoriteMutation = useMutation(
    () => imageApi.toggleFavorite(image.id),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['images'])
        queryClient.invalidateQueries(['image', image.id])
      }
    }
  )
  
  const handleDownload = () => {
    // Use the API download endpoint
    const link = document.createElement('a')
    link.href = `/api/image-file/${image.id}?download=true`
    link.download = image.filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
  const formatFileSize = (bytes: number | undefined) => {
    if (!bytes) return 'Unknown'
    const mb = bytes / (1024 * 1024)
    return mb > 1 ? `${mb.toFixed(1)} MB` : `${(bytes / 1024).toFixed(0)} KB`
  }

  const formatDate = (dateString: string | undefined) => {
    if (!dateString) return 'Unknown'
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6">
      {/* Basic Info */}
      <section>
        <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">Basic Information</h4>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-gray-600 dark:text-gray-400">Filename</span>
            <span className="text-gray-900 dark:text-white font-mono text-xs break-all text-right ml-2">
              {image.filename}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600 dark:text-gray-400">Dimensions</span>
            <span className="text-gray-900 dark:text-white">
              {image.width || '?'} Ã— {image.height || '?'}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600 dark:text-gray-400">Format</span>
            <span className="text-gray-900 dark:text-white uppercase">
              {image.format || 'Unknown'}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600 dark:text-gray-400">File Size</span>
            <span className="text-gray-900 dark:text-white">
              {formatFileSize(image.file_size)}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600 dark:text-gray-400">Created</span>
            <span className="text-gray-900 dark:text-white">
              {formatDate(image.created_at)}
            </span>
          </div>
        </div>
      </section>

      {/* Actions */}
      {image && (
        <section>
          <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">Actions</h4>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">Rating:</span>
                <StarRating
                  rating={image.rating || 0}
                  onRatingChange={(rating) => ratingMutation.mutate({ id: image.id, rating })}
                />
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600 dark:text-gray-400">Favorite:</span>
                <FavoriteButton
                  isFavorite={image.favorite || false}
                  onToggle={() => favoriteMutation.mutate(image.id)}
                />
              </div>
            </div>
          </div>
        </section>
      )}

      {/* AI Generation Parameters */}
      {(image.prompt || image.model_name || image.seed) && (
        <section>
          <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">AI Generation</h4>
          <div className="space-y-3 text-sm">
            {image.model_name && (
              <div>
                <span className="text-gray-600 dark:text-gray-400 block mb-1">Model</span>
                <span className="text-gray-900 dark:text-white font-mono text-xs">
                  {image.model_name}
                </span>
                {image.model_hash && (
                  <span className="text-gray-500 dark:text-gray-400 font-mono text-xs block">
                    {image.model_hash}
                  </span>
                )}
              </div>
            )}
            
            {image.prompt && (
              <div>
                <span className="text-gray-600 dark:text-gray-400 block mb-1">Prompt</span>
                <div className="text-gray-900 dark:text-white text-xs leading-relaxed p-2 bg-gray-50 dark:bg-gray-800 rounded max-h-32 overflow-y-auto">
                  {image.prompt}
                </div>
              </div>
            )}
            
            {image.negative_prompt && (
              <div>
                <span className="text-gray-600 dark:text-gray-400 block mb-1">Negative Prompt</span>
                <div className="text-gray-900 dark:text-white text-xs leading-relaxed p-2 bg-gray-50 dark:bg-gray-800 rounded max-h-24 overflow-y-auto">
                  {image.negative_prompt}
                </div>
              </div>
            )}

            <div className="grid grid-cols-2 gap-3">
              {image.seed && (
                <div>
                  <span className="text-gray-600 dark:text-gray-400 block mb-1">Seed</span>
                  <span className="text-gray-900 dark:text-white font-mono text-xs">
                    {image.seed}
                  </span>
                </div>
              )}
              {image.steps && (
                <div>
                  <span className="text-gray-600 dark:text-gray-400 block mb-1">Steps</span>
                  <span className="text-gray-900 dark:text-white">{image.steps}</span>
                </div>
              )}
              {image.cfg_scale && (
                <div>
                  <span className="text-gray-600 dark:text-gray-400 block mb-1">CFG Scale</span>
                  <span className="text-gray-900 dark:text-white">{image.cfg_scale}</span>
                </div>
              )}
              {image.sampler && (
                <div>
                  <span className="text-gray-600 dark:text-gray-400 block mb-1">Sampler</span>
                  <span className="text-gray-900 dark:text-white text-xs">{image.sampler}</span>
                </div>
              )}
            </div>
          </div>
        </section>
      )}

      {/* Tags and Categories */}
      {(image.tags.length > 0 || image.categories.length > 0) && (
        <section>
          <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">Organization</h4>
          <div className="space-y-3">
            {image.tags.length > 0 && (
              <div>
                <span className="text-gray-600 dark:text-gray-400 block mb-2 text-sm">Tags</span>
                <div className="flex flex-wrap gap-1">
                  {image.tags.map((tag) => (
                    <span
                      key={tag}
                      className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            {image.categories.length > 0 && (
              <div>
                <span className="text-gray-600 dark:text-gray-400 block mb-2 text-sm">Categories</span>
                <div className="flex flex-wrap gap-1">
                  {image.categories.map((category) => (
                    <span
                      key={category}
                      className="px-2 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-xs rounded-full"
                    >
                      {category}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </section>
      )}

      {/* Actions */}
      <section>
        <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">Actions</h4>
        <div className="space-y-2">
          <button 
            onClick={handleDownload}
            className="w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-md transition-colors"
          >
            Download Original
          </button>
          <button 
            onClick={() => favoriteMutation.mutate()}
            disabled={favoriteMutation.isLoading}
            className="w-full px-3 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-900 dark:text-white text-sm rounded-md transition-colors disabled:opacity-50"
          >
            {favoriteMutation.isLoading 
              ? 'Updating...' 
              : image.favorite 
                ? 'Remove from Favorites' 
                : 'Add to Favorites'
            }
          </button>
        </div>
      </section>
    </div>
  )
}